<!doctype html>
<html lang="ja">
<head>
<meta charset="utf-8" />
<title>抜型を探す（ターゲット強調）</title>
<meta name="viewport" content="width=device-width,initial-scale=1" />
<style>
  :root { --ok:#2b8a3e; --ng:#c92a2a; --hint:#1c7ed6; --bd:#ddd; --tx:#222; --sub:#666; }
  body { font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Noto Sans JP", sans-serif; margin: 10px; color: var(--tx); }
  .row{display:flex;gap:12px;flex-wrap:wrap;align-items:flex-start}
  .panel{flex:1 1 360px;min-width:320px}
  video{width:100%;max-width:520px;border:1px solid var(--bd);border-radius:12px;background:#000}
  canvas{position:absolute;inset:0;pointer-events:none}
  .stack{position:relative;max-width:520px}
  .controls{display:flex;gap:8px;flex-wrap:wrap;margin:8px 0}
  button{padding:12px 16px;border-radius:12px;border:1px solid var(--bd);background:#fff;cursor:pointer}
  .pill{border-radius:999px}
  .badge{display:inline-block;border-radius:8px;padding:2px 8px;font-size:12px;background:#eef;color:#224}
  .target{font-size:14px}
  .target b{font-size:16px}
  .fixedBar{
    position:fixed;left:10px;top:10px;
    background:#e8f5e9;color:#0a5; border:1px solid #0a5;
    padding:6px 10px;border-radius:10px;font-weight:700; font-size:16px;
  }
  .toast{
    position:absolute; padding:6px 8px; background:#000c; color:#fff; border-radius:8px; font-size:12px;
    transform:translate(-50%,-150%);
    pointer-events:none;
  }
  .legend{font-size:12px;color:#555}
  .okChip{background:#e6fcf5;color:#087f5b;border:1px solid #96f2d7;padding:0 6px;border-radius:6px}
  .ngChip{background:#fff5f5;color:#e03131;border:1px solid #ffc9c9;padding:0 6px;border-radius:6px}
  .muted{color:#666;font-size:12px}
</style>
</head>
<body>
  <div class="fixedBar" id="fixed">固定棚: （なし）</div>

  <h3 style="margin:6px 0 8px">棚→型の順にスキャン（自動登録）</h3>
  <div class="controls">
    <a id="btnList" class="badge" href="javascript:void(0)">スキャン結果確認</a>
    <button id="btnStart" class="pill">カメラ開始</button>
    <button id="btnStop"  class="pill" disabled>停止</button>
  </div>

  <div class="panel">
    <div class="target">
      目的の抜型：<b id="tgtBN">-</b> [<b id="tgtWC">-</b>] <span class="badge" id="tgtWN"></span>
      <div class="legend" style="margin-top:4px">
        <span class="okChip">青枠＝一致（ロック）</span>　<span class="ngChip">赤枠＝不一致</span>
      </div>
    </div>
  </div>

  <div class="row" style="margin-top:8px">
    <div class="panel">
      <div class="stack" id="stack">
        <video id="v" playsinline muted></video>
        <canvas id="ov"></canvas>
      </div>
      <div class="controls">
        <label class="badge">画像でテスト<input id="fileTest" type="file" accept="image/*" style="display:none" /></label>
        <span id="cap" class="badge"></span>
      </div>
      <div id="status" class="muted">準備中…</div>
      <div id="err" class="muted" style="color:#b00;white-space:pre-wrap"></div>
    </div>

    <div class="panel">
      <div class="badge">ヒント</div>
      <div class="muted" style="margin-top:6px">
        ・このページは URL パラメータ <code>?book=&wc=&wn=</code> を使います。<br>
        ・プレーン型 <code>die-Book-WorkCord</code> も URL型 <code>?book=&wc=</code> も検知します。<br>
        ・一致したコードは<strong style="color:var(--hint)">青枠＆音</strong>でロック表示します。
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js" crossorigin="anonymous"></script>
  <script>
  // ===== パラメータ受け取り =====
  const P = new URLSearchParams(location.search);
  const TGT = {
    book: (P.get("book")||"").trim(),
    wc:   (P.get("wc")||"").trim(),
    wn:   (P.get("wn")||"").trim(),
  };
  document.getElementById("tgtBN").textContent = TGT.book || "-";
  document.getElementById("tgtWC").textContent = TGT.wc || "-";
  document.getElementById("tgtWN").textContent = TGT.wn || "";

  // ===== 要素参照 =====
  const v = document.getElementById("v");
  const ov = document.getElementById("ov");
  const octx = ov.getContext("2d", { willReadFrequently:true });
  const statusEl = document.getElementById("status");
  const errEl = document.getElementById("err");
  const capEl = document.getElementById("cap");
  const fixedEl = document.getElementById("fixed");
  const stack = document.getElementById("stack");
  const btnStart = document.getElementById("btnStart");
  const btnStop = document.getElementById("btnStop");

  // ===== 端末機能 =====
  let stream=null, rafId=null, detector=null;
  let useBD = ('BarcodeDetector' in window);
  capEl.textContent = useBD ? "BarcodeDetector + jsQR" : "jsQR only";

  // ===== オーディオ（成功音） =====
  const beep = (() => {
    let ctx; return () => {
      try{
        ctx = ctx || new (window.AudioContext||window.webkitAudioContext)();
        const o = ctx.createOscillator(), g = ctx.createGain();
        o.type="sine"; o.frequency.value=880; g.gain.value=0.001; // 初期
        o.connect(g); g.connect(ctx.destination);
        const now = ctx.currentTime;
        g.gain.setValueAtTime(0.001, now);
        g.gain.exponentialRampToValueAtTime(0.2, now+0.02);
        g.gain.exponentialRampToValueAtTime(0.0001, now+0.18);
        o.start(now); o.stop(now+0.2);
      }catch{}
    };
  })();

  // ===== 解析ユーティリティ =====
  const classify = (s)=>{
    if(/^loc-/i.test(s)) return "loc";
    if(/^die-/i.test(s)) return "die";
    try{ const u=new URL(s); if(u.searchParams.get("book")||u.searchParams.get("wc")) return "die"; }catch{}
    return "other";
  };
  const parseDie = (text)=>{
    // plain: die-Book-WorkCord
    let m = /^die-([^-\n]+)-(.+)$/.exec(text);
    if(m){ return { bn:m[1].trim(), wc:m[2].trim() }; }
    // url: ...?book=...&wc=...
    try{
      const u=new URL(text);
      const book=(u.searchParams.get("book")||"").trim();
      const wc=(u.searchParams.get("wc")||"").trim();
      if(book||wc) return { bn:book, wc:wc };
    }catch{}
    return null;
  };
  const dieKey = (bn,wc)=>`${(bn||"").trim()}@@${(wc||"").trim()}`;
  const targetKey = dieKey(TGT.book, TGT.wc);

  // ===== 枠描画 =====
  function drawBox(loc, color="#f00", lw=3, label=""){
    const pts = loc ? [
      loc.topLeftCorner, loc.topRightCorner, loc.bottomRightCorner, loc.bottomLeftCorner
    ] : null;
    if(!pts) return;
    octx.save();
    octx.lineWidth = lw; octx.strokeStyle = color;
    octx.beginPath();
    octx.moveTo(pts[0].x, pts[0].y);
    for(let i=1;i<pts.length;i++) octx.lineTo(pts[i].x, pts[i].y);
    octx.closePath(); octx.stroke();
    if(label){
      const x = (pts[0].x + pts[2].x)/2;
      const y = Math.min(pts[0].y, pts[1].y) - 8;
      octx.fillStyle = color; octx.font="14px system-ui"; octx.textAlign="center";
      octx.fillText(label, x, y<14?14:y);
    }
    octx.restore();
  }

  // ===== オーバレイサイズ調整 =====
  function fitOverlay(){
    ov.width  = v.videoWidth  || ov.width;
    ov.height = v.videoHeight || ov.height;
    ov.style.width = v.clientWidth + "px";
    ov.style.height= v.clientHeight + "px";
  }

  // ===== カメラ制御 =====
  function stopCam(){
    cancelAnimationFrame(rafId); rafId=null;
    if(stream){ stream.getTracks().forEach(t=>t.stop()); stream=null; }
    btnStart.disabled=false; btnStop.disabled=true;
    statusEl.textContent = "停止中";
  }
  function showError(e){ console.error(e); errEl.textContent = `❌ ${e?.name||""} ${e?.message||e}`; }

  async function startCam(){
    stopCam(); errEl.textContent="";
    try{
      stream = await navigator.mediaDevices.getUserMedia({
        video:{ facingMode:{ideal:"environment"}, width:{ideal:1280}, height:{ideal:720} },
        audio:false
      });
    }catch(e){ showError(e); return; }
    v.srcObject = stream;
    try{ await v.play(); }catch(e){ showError(e); return; }
    btnStart.disabled=true; btnStop.disabled=false;
    if(useBD){ try{ detector = new BarcodeDetector({ formats:["qr_code"] }); }catch{ useBD=false; detector=null; } }
    fitOverlay();
    tick();
  }

  // 複数検出（jsQR マルチ）
  function jsqrMulti(imgData, w, h, max=12){
    const out=[], data = new Uint8ClampedArray(imgData.data);
    const maskRect = loc=>{
      const xs=[loc.topLeftCorner.x,loc.topRightCorner.x,loc.bottomRightCorner.x,loc.bottomLeftCorner.x];
      const ys=[loc.topLeftCorner.y,loc.topRightCorner.y,loc.bottomRightCorner.y,loc.bottomLeftCorner.y];
      const x0=Math.max(0,Math.min(...xs)|0), x1=Math.min(w,Math.max(...xs)|0);
      const y0=Math.max(0,Math.min(...ys)|0), y1=Math.min(h,Math.max(...ys)|0);
      for(let y=y0;y<y1;y++){ for(let x=x0;x<x1;x++){ const i=(y*w+x)*4; data[i]=data[i+1]=data[i+2]=255; data[i+3]=255; } }
    };
    for(let k=0;k<max;k++){
      const hit = jsQR(data, w, h, { inversionAttempts:'attemptBoth' });
      if(!hit) break;
      out.push(hit); maskRect(hit.location);
    }
    return out;
  }

  let lockedOnce = false; // 成功音の連打防止

  async function tick(){
    if(!stream) return;
    if(v.videoWidth){
      fitOverlay();
      octx.clearRect(0,0,ov.width,ov.height);

      // 1フレームから検出用ImageDataを取得
      const tmp = document.createElement("canvas");
      tmp.width = v.videoWidth; tmp.height = v.videoHeight;
      const tctx = tmp.getContext("2d", { willReadFrequently:true });
      tctx.drawImage(v,0,0,tmp.width,tmp.height);

      const imgData = tctx.getImageData(0,0,tmp.width,tmp.height);
      const hits = jsqrMulti(imgData, tmp.width, tmp.height, 18);

      let anyMatch=false;
      for(const h of hits){
        const raw = (h.data||"").trim();
        const kind = classify(raw);
        if(kind==="die"){
          const parsed = parseDie(raw);
          const k = parsed ? dieKey(parsed.bn, parsed.wc) : "";
          const isMatch = (k && k.toLowerCase() === targetKey.toLowerCase());
          anyMatch = anyMatch || isMatch;
          drawBox(h.location, isMatch ? "#1c7ed6" : "#e03131", isMatch?5:3, isMatch?"一致":"");
          if(isMatch && !lockedOnce){
            lockedOnce = true;
            beep();
            // 枠の近くに「ロック」をポップ表示
            showToastNear(h.location, "ロック");
          }
        }else if(kind==="loc"){
          drawBox(h.location, "#888", 2, "LOC");
        }
      }

      statusEl.textContent = hits.length ? (anyMatch?"目的の抜型をロック中":"検知 "+hits.length+" 件（不一致）") : "探索中…";
    }
    rafId = requestAnimationFrame(tick);
  }

  function showToastNear(loc, text){
    const el = document.createElement("div");
    el.className="toast";
    el.textContent = text;
    // 位置：枠の上辺中心
    const x = (loc.topLeftCorner.x + loc.topRightCorner.x)/2;
    const y = Math.min(loc.topLeftCorner.y, loc.topRightCorner.y);
    // キャンバス座標→CSS座標換算
    const rx = x / ov.width * v.clientWidth;
    const ry = y / ov.height * v.clientHeight;
    el.style.left = rx+"px"; el.style.top = ry+"px";
    stack.appendChild(el);
    setTimeout(()=>{ el.remove(); }, 1200);
  }

  // 画像テスト
  document.getElementById("fileTest").addEventListener("change", async (ev)=>{
    const f = ev.target.files?.[0]; if(!f) return;
    const img = new Image();
    img.onload = ()=>{
      const tmp = document.createElement("canvas");
      tmp.width=img.width; tmp.height=img.height;
      const tctx=tmp.getContext("2d", { willReadFrequently:true });
      tctx.drawImage(img,0,0,tmp.width,tmp.height);
      const imgData = tctx.getImageData(0,0,tmp.width,tmp.height);
      const hits = jsqrMulti(imgData, tmp.width, tmp.height, 18);
      octx.clearRect(0,0,ov.width,ov.height);
      for(const h of hits){
        const raw = (h.data||"").trim();
        const parsed = parseDie(raw);
        const k = parsed ? dieKey(parsed.bn, parsed.wc) : "";
        const isMatch = (k && k.toLowerCase()===targetKey.toLowerCase());
        drawBox(h.location, isMatch ? "#1c7ed6" : "#e03131", isMatch?5:3, isMatch?"一致":"");
        if(isMatch){ showToastNear(h.location,"ロック"); }
      }
      statusEl.textContent = "静止画テスト: 検知 "+hits.length+" 件";
      ev.target.value="";
    };
    img.src = URL.createObjectURL(f);
  });

  // 固定棚表示（オプション：locパラメータがあれば表示強調）
  const locParam = (P.get("loc")||"").trim();
  if(locParam){
    fixedEl.textContent = "固定棚: " + locParam;
    fixedEl.style.background="#e6ffe6"; fixedEl.style.color="#086"; fixedEl.style.borderColor="#086";
  }else{
    fixedEl.textContent = "固定棚: （なし）";
  }

  // ボタン
  document.getElementById("btnStart").addEventListener("click", startCam);
  document.getElementById("btnStop").addEventListener("click", stopCam);
  document.getElementById("btnList").addEventListener("click", ()=>alert("（ここに結果一覧ビューを後付けできます）"));

  // 初期
  statusEl.textContent = TGT.book && TGT.wc ? "カメラを開始してください" : "URLに ?book と ?wc を付与してください";
  </script>
</body>
</html>
